//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFServiceHost.Model
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceHost.Model")]
    public partial class Customer : object, System.Runtime.Serialization.IExtensibleDataObject
    {        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;        
        private string AddressField;        
        private string CompanyNameField;        
        private string ContactNameField;        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyName
        {
            get
            {
                return this.CompanyNameField;
            }
            set
            {
                this.CompanyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName
        {
            get
            {
                return this.ContactNameField;
            }
            set
            {
                this.ContactNameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IServiceClass")]
public interface IServiceClass
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/UpdateCustomer", ReplyAction="http://tempuri.org/IServiceClass/UpdateCustomerResponse")]
    void UpdateCustomer(WCFServiceHost.Model.Customer request, System.Guid cacheId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/UpdateCustomer", ReplyAction="http://tempuri.org/IServiceClass/UpdateCustomerResponse")]
    System.Threading.Tasks.Task UpdateCustomerAsync(WCFServiceHost.Model.Customer request, System.Guid cacheId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/GetCustomer", ReplyAction="http://tempuri.org/IServiceClass/GetCustomerResponse")]
    GetCustomerResponse GetCustomer(GetCustomerRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/GetCustomer", ReplyAction="http://tempuri.org/IServiceClass/GetCustomerResponse")]
    System.Threading.Tasks.Task<GetCustomerResponse> GetCustomerAsync(GetCustomerRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/CompareGuidForCaching", ReplyAction="http://tempuri.org/IServiceClass/CompareGuidForCachingResponse")]
    bool CompareGuidForCaching(System.Guid clientguid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceClass/CompareGuidForCaching", ReplyAction="http://tempuri.org/IServiceClass/CompareGuidForCachingResponse")]
    System.Threading.Tasks.Task<bool> CompareGuidForCachingAsync(System.Guid clientguid);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomer", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class GetCustomerRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public System.Guid lastUpdate;
    
    public GetCustomerRequest()
    {
    }
    
    public GetCustomerRequest(System.Guid lastUpdate)
    {
        this.lastUpdate = lastUpdate;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="GetCustomerResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
public partial class GetCustomerResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
    public WCFServiceHost.Model.Customer GetCustomerResult;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
    public System.Guid lastUpdate;
    
    public GetCustomerResponse()
    {
    }
    
    public GetCustomerResponse(WCFServiceHost.Model.Customer GetCustomerResult, System.Guid lastUpdate)
    {
        this.GetCustomerResult = GetCustomerResult;
        this.lastUpdate = lastUpdate;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IServiceClassChannel : IServiceClass, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class ServiceClassClient : System.ServiceModel.ClientBase<IServiceClass>, IServiceClass
{
    
    public ServiceClassClient()
    {
    }
    
    public ServiceClassClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public ServiceClassClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClassClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public ServiceClassClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void UpdateCustomer(WCFServiceHost.Model.Customer request, System.Guid cacheId)
    {
        base.Channel.UpdateCustomer(request, cacheId);
    }
    
    public System.Threading.Tasks.Task UpdateCustomerAsync(WCFServiceHost.Model.Customer request, System.Guid cacheId)
    {
        return base.Channel.UpdateCustomerAsync(request, cacheId);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    GetCustomerResponse IServiceClass.GetCustomer(GetCustomerRequest request)
    {
        return base.Channel.GetCustomer(request);
    }
    
    public WCFServiceHost.Model.Customer GetCustomer(ref System.Guid lastUpdate)
    {
        GetCustomerRequest inValue = new GetCustomerRequest();
        inValue.lastUpdate = lastUpdate;
        GetCustomerResponse retVal = ((IServiceClass)(this)).GetCustomer(inValue);
        lastUpdate = retVal.lastUpdate;
        return retVal.GetCustomerResult;
    }
    
    public System.Threading.Tasks.Task<GetCustomerResponse> GetCustomerAsync(GetCustomerRequest request)
    {
        return base.Channel.GetCustomerAsync(request);
    }
    
    public bool CompareGuidForCaching(System.Guid clientguid)
    {
        return base.Channel.CompareGuidForCaching(clientguid);
    }
    
    public System.Threading.Tasks.Task<bool> CompareGuidForCachingAsync(System.Guid clientguid)
    {
        return base.Channel.CompareGuidForCachingAsync(clientguid);
    }
}
